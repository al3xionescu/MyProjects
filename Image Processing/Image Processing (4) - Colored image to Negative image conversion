/*
We will convert a colored image to negative image. 
Algorithm:
1. Get the RGB value of the pixel.
2. Calculate new RGB values as follows:
   R = 255 – R
   G = 255 – G
   B = 255 – B
3. Replace the R, G and B value of the pixel with the values calculated in step 2.
4. Repeat Step 1 to Step 3 for each pixels of the image.
*/

import java.io.File;
import java.io.IOException;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;
 
public class Negative
{
    public static void main(String args[])throws IOException
    {
        BufferedImage img = null;
        File f = null;
 
        // read image
        try
        {
            f = new File("G:\\Inp.jpg");
            img = ImageIO.read(f);
        }
        catch(IOException e)
        {
            System.out.println(e);
        }
 
        // Get image width and height
        int width = img.getWidth();
        int height = img.getHeight();
 
        // Convert to negative
        for (int y = 0; y < height; y++)
        {
            for (int x = 0; x < width; x++)
            {
                int p = img.getRGB(x,y);
                int a = (p>>24)&0xff;
                int r = (p>>16)&0xff;
                int g = (p>>8)&0xff;
                int b = p&0xff;
 
                //subtract RGB from 255
                r = 255 - r;
                g = 255 - g;
                b = 255 - b;
 
                //set new RGB value
                p = (a<<24) | (r<<16) | (g<<8) | b;
                img.setRGB(x, y, p);
            }
        }
 
        // write image
        try
        {
            f = new File("G:\\Out.jpg");
            ImageIO.write(img, "jpg", f);
        }
        catch(IOException e)
        {
            System.out.println(e);
        }
    }
}
